Run
2022_03_07: Stable version with graph vae, gcn, with pred_steps 1. Achieved up to 82% sucess rate and collision rate 14%.
2022_03_08: Prediction steps 2 has slight lower performance (success 81%, collision 17%). Added batch normalization and residual, reduces performance very badly (47%). Gated_GCN have slightly lower success rate than gcn (success ~80%, collision 19%).
2022_03_09: Remove history_vel and history_dist from input states and edges, and use pos, vpref, vel instead. This model converge faster around 10K iteraction (sucess 79%, collision 18%, measured at 20K). Add dir (computed from position at future_steps i.e. 4) converge even faster from 10K (success 81%, collision 17%). Use speed i.e vnorm instead of vel. 

2022_03_10:Use linear scheduler for goal reward and collision penalty. During sampling the reward/penalty were fixed to initial values 100/-100. CASE I: Gradually increase success reward from 10 to 100, whereas, decrease the collision penalty gradually from -100 to -10. Low success reward (or high collision penalty) at the early steps of training means collision avoidance is more important that reaching goal, thus the robot is more careful while making decisions (85% success, 14% collision). CASE II: Increase collision penalty (from low to high) and decrease success reward (from high to low) gradually over training steps, which mean reaching goal is more important at the early steps than collision avoidance - success rate decreases after 30K from 81% to 72%). Use new CVAE from Recon-GCN with support of num_samples (success 85%, collision 15% at 50K). Unforfortunately, the z didn't backpropagate properly (sample instead of rsample). 
